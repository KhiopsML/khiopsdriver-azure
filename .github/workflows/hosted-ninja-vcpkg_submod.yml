# Copyright (c) 2021-2022-2023-2024 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# The workflow runs on x64 and ARM platforms.
# Workflow steps:
# - Setup vcpkg and cache it on the GitHub Action cloud based cache.
# - Runs CMake with CMakePreset.json using a presest configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg 
#   to install dependencies described by the vcpkg.json manifest file. 
#   This stage also runs vcpkg with Binary Caching leveraging GitHub Action cache to 
#   store the built packages artifacts, hence it will be a no-op if those are restored 
#   from cache (e.g., already previously built).
# - Finally builds the sources with Ninja, and tests as well.
name: hosted-ninja-vcpkg_submod-autocache
on:
  push: 
  pull_request:
    branches: 
    - v11
    - main

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-13
            triplet: x64-osx
          - os: macos-14
            triplet: arm64-osx
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
    #
    # [OPTIONAL] Define the vcpkg's triplet 
    # you want to enforce, otherwise the default one 
    # for the hosting system will be automatically
    # choosen (x64 is the default on all platforms, 
    # e.g. x64-osx).
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }} 

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - uses: lukka/get-cmake@v3.30.1

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Install Azurite
        if: matrix.os == 'ubuntu-latest'
        id: azuright
        uses: sgouache/azuright@v1.2
        with:
          skip-api-version-check: true

      - name: Set Azurite env for later use
        if: matrix.os == 'ubuntu-latest'
        run: echo "AZURE_STORAGE_CONNECTION_STRING=${{ steps.azuright.outputs.connstring }}" >> $GITHUB_ENV
        shell: bash

      # Populate storage emulator
      - name:  Install test data in Azurite
        if: matrix.os == 'ubuntu-latest'
        run:   |
            if [ "$RUNNER_OS" == "Linux" ]; then
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            elif [ "$RUNNER_OS" == "Windows" ]; then
              pwsh scripts\\install_azurecli.ps1
            else
              brew update && brew install azure-cli
            fi
            az storage container create -n data-test-khiops-driver-azure --connection-string "${{ steps.azuright.outputs.connstring }}"
            az storage blob upload-batch --destination data-test-khiops-driver-azure/khiops_data --source $PWD/khiops_data --connection-string "${{ steps.azuright.outputs.connstring }}"
        shell: bash

      # Retrieve azure credentials through WIF - needed to run tests
      - name: Azure CLI Login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: oidc
          enable-AzPSSession: true

      - name: Azure PowerShell script
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Get-AzContext
            Get-AzResource | Format-Table
            Get-AzStorageAccount | Format-Table

      - name: Install coverage tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install lcov gcovr
  
      - name: Build debug version and run sanitizer checks.
        if: matrix.os == 'ubuntu-latest'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetAdditionalArgs: "['-DCMAKE_BUILD_TYPE=Debug']"
          buildPreset: 'ninja-vcpkg-debug'

      - name: Run tests with emulated storage
        if: matrix.os == 'ubuntu-latest'
        run: |
          AZURE_EMULATED_STORAGE=true ctest --preset test-debug --output-on-failure

      # Retrieve azure credentials through WIF - needed to run tests
      - name: Azure CLI Login
        if: matrix.os == 'ubuntu-latest'
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: oidc

      - name: Run tests with cloud storage
        if: matrix.os == 'ubuntu-latest'
        run: |
          AZURE_EMULATED_STORAGE=false ctest --preset test-debug --output-on-failure

      # Disable coverage until we find how to fix the "line mismatch error"
      # cmake --build --preset ninja-vcpkg-debug --target khiops-gcs_coverage --target khiops-gcs_cobertura

      # - name: Upload coverage results
      #   uses: actions/upload-artifact@v4
      #   if: matrix.os == 'ubuntu-latest'
      #   with:
      #     name: coverage
      #     path: |
      #       builds/ninja-multi-vcpkg/coverage/*
      #       builds/ninja-multi-vcpkg/coverage.*
      #     if-no-files-found: ignore

      - name: Run CMake+vcpkg+Ninja to build packages and generate/build the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetAdditionalArgs: "['-DCMAKE_BUILD_TYPE=Release']"
          buildPreset: 'ninja-vcpkg-release'

      # Retrieve azure credentials through WIF - needed to run tests
      - name: Azure CLI Login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: oidc

      - name: Run tests with cloud storage
        run: |
          ctest --preset test-release --output-on-failure
  
      - name: Upload the packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}
          path: |
            builds/ninja-multi-vcpkg/lib/*.dylib
            builds/ninja-multi-vcpkg/lib/*.so
            builds/ninja-multi-vcpkg/bin/*.dll
          if-no-files-found: ignore
